CoreASM RailRoadCrossing

use StandardPlugins
use TimePlugin
use MathPlugin
use TurboASMPlugin
use PropertyPlugin
use Queue

//enum Nodes = {p1, p2, p3}
//enum Channels = {c12, c13, c21, c23, c31, c32}
//enum msgType = {token, msg}

enum Event = {sendMsg, receiveMsg, localEvent }
enum SnapshotEvents = {sendToke, receiveToken, crateSnapshot}

//derived nodesMap = {
//	1 -> {2, 3},
//	2 -> {1, 3},
//	3 -> {1, 2}
//}

derived nodesMap = {
	1 -> {10, 11},
	2 -> {10, 11},
	3 -> {10, 11},
	4 -> {10, 11},
	5 -> {10, 11},
	6 -> {10, 11},
	7 -> {10, 11},
	8 -> {10, 11},
	9 -> {10, 11},
	10 -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 11},
	11 -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22},
	12 -> {21, 22},
	13 -> {21, 22},
	14 -> {21, 22},
	15 -> {21, 22},
	16 -> {21, 22},
	17 -> {21, 22},
	18 -> {21, 22},
	19 -> {21, 22},
	20 -> {21, 22},
	21 -> {12, 13, 14, 15, 16, 17, 18, 19, 20, 22},
	22 -> {12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 11, 33},
	23 -> {32, 33},
	24 -> {32, 33},
	25 -> {32, 33},
	26 -> {32, 33},
	27 -> {32, 33},
	28 -> {32, 33},
	29 -> {32, 33},
	30 -> {32, 33},
	31 -> {32, 33},
	32 -> {23, 24, 25, 26, 27, 28, 29, 30, 31, 33},
	33 -> {23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 22, 44},
	34 -> {43, 44},
	35 -> {43, 44},
	36 -> {43, 44},
	37 -> {43, 44},
	38 -> {43, 44},
	39 -> {43, 44},
	40 -> {43, 44},
	41 -> {43, 44},
	42 -> {43, 44},
	43 -> {34, 35, 36, 37, 38, 39, 40, 41, 42, 44},
	44 -> {34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 33, 55},
	45 -> {54, 55},
	46 -> {54, 55},
	47 -> {54, 55},
	48 -> {54, 55},
	49 -> {54, 55},
	50 -> {54, 55},
	51 -> {54, 55},
	52 -> {54, 55},
	53 -> {54, 55},
	54 -> {45, 46, 47, 48, 49, 50, 51, 52, 53, 55},
	55 -> {45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 44, 66},
	56 -> {65, 66},
	57 -> {65, 66},
	58 -> {65, 66},
	59 -> {65, 66},
	60 -> {65, 66},
	61 -> {65, 66},
	62 -> {65, 66},
	63 -> {65, 66},
  	64 -> {65, 66},
	65 -> {56, 57, 58, 59, 60, 61, 62, 63, 64, 66},
	66 -> {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 55, 77},
	67 -> {76, 77},
	68 -> {76, 77},
	69 -> {76, 77},
	70 -> {76, 77},
	71 -> {76, 77},
	72 -> {76, 77},
	73 -> {76, 77},
  	74 -> {76, 77},
	75 -> {76, 77},
	76 -> {67, 68, 69, 70, 71, 72, 73, 74, 75, 77},
	77 -> {67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 66, 88},
	78 -> {87, 88},
	79 -> {87, 88},
	80 -> {87, 88},
	81 -> {87, 88},
	82 -> {87, 88},
	83 -> {87, 88},
  	84 -> {87, 88},
	85 -> {87, 88},
	86 -> {87, 88},
	87 -> {78, 79, 80, 81, 82, 83, 84, 85, 86, 88},
	88 -> {78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 77, 99},
	89 -> {98, 99},
	90 -> {98, 99},
	91 -> {98, 99},
	92 -> {98, 99},
	93 -> {98, 99},
  	94 -> {98, 99},
	95 -> {98, 99},
	96 -> {98, 99},
	97 -> {98, 99},
	98 -> {89, 90, 91, 92, 93, 94, 95, 96, 97, 99},
	99 -> {89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 88}
}

function state: Agents -> LIST
function channel: Agents * Agents -> LIST

function isFirstToken: Agents -> BOOLEAN
function snapshotState: Agents -> LIST
function snapshotListenOnChannel: Agents * Agents -> BOOLEAN
function snapshotChannelIsDone: Agents * Agents -> BOOLEAN
function snapshotInChannelState: Agents * Agents -> LIST


derived myName = "P" + self
derived myState = state(self)
derived mySnapshotState = snapshotState(self)
derived myNeighbors = nodesMap()(self)

derived agentCount = size(nodesMap)
derived isSnapshotDone =
	forall x in [1..agentCount] holds
		forall y in nodesMap()(x) holds
			snapshotChannelIsDone(x, y)

init InitRule

rule InitRule =
	seq
		seqblock
			// Initialize agents
			forall i in [1..agentCount] do par
				Agents(i) := true
				program(i) := @AgentProgram
				// Initial values for agents
				state(i) := []	// agent state
				isFirstToken(i) := true
				snapshotState(i) := []
				forall y in nodesMap()(i) do par
					print "initrule:: " + i + "," + y
					snapshotListenOnChannel(i, y) := false
					snapshotChannelIsDone(i, y) := false
					snapshotInChannelState(i, y) := []
					channel(i, y) := []
					channel(y, i) := []
				endpar
			endpar endforall
			InitSnapshot(1)
		endseqblock
	next
		program(self) := undef

rule AgentProgram = {
	seqblock
		//print "-->AgentProgram " + myName
		//print "myState:" + myState
		//print "mySnapshotState:" + mySnapshotState

		forall x in myNeighbors do {
			choose y in Event do {
				case y of
					//sendMsg: SendMsg(self, x, "msg" + self + x)
					receiveMsg: ReceiveMsg(self, x)
					//localEvent: LocalEvent(self)
				endcase
			}
		}
		//print "-------"
		if isSnapshotDone then seqblock
			print "--->" + self + " DONE Snapshot! State::" + snapshotState(self) + "   (actual state=" + myState + ")"
			forall i in myNeighbors do print i + " channelState=" + snapshotInChannelState(i, self)
			program(self) := undef
		endseqblock endif
	endseqblock
}

// system events

rule SendMsg(a1, a2, msg) = {
	seqblock
		channel(a1, a2) := channel(a1, a2) + [msg]
		//print "sendMsg--->" + channel(a1, a2) + "   " + a1 + "," + a2
	endseqblock
}

rule ReceiveMsg(receiver, sender) = {
	seqblock
		//print "1receiveMsg--->" + channel(sender, receiver) + "  " + sender + "," + receiver

		if size(channel(sender, receiver)) > 0 then seqblock
			local message := head(channel(sender, receiver)) in
				if message = "token" then
					MarkerSendReceiveRule(receiver, sender)
				else {
					state(receiver) := state(receiver) + [message]
					if snapshotListenOnChannel(sender, receiver) then {
						snapshotInChannelState(sender, receiver) := snapshotInChannelState(sender, receiver) + [message]
					}
				}
			channel(sender, receiver) := drop(channel(sender, receiver), 1)
		endseqblock

		//print "receiveMsg--->" + state(receiver) + "    " + channel(sender, receiver)
	endseqblock
}

rule LocalEvent(a1) = {
	seqblock
		state(a1) := state(a1) + ["local" + a1]
		//print "localEvent--->" + state(a1)
	endseqblock
}

// snapshot events

rule InitSnapshot(a1) = {
	isFirstToken(a1) := false
	snapshotState(a1) := ["initSnap"]
	forall i in nodesMap()(a1) do seqblock
			print "Init Snapshot:: " + a1 + "," + i
			channel(a1, i) := channel(a1, i) + ["token"]
			snapshotListenOnChannel(i, a1) := true
		endseqblock
	endforall
}

rule MarkerSendReceiveRule(receiver, sender) = {
	print "---->MarkerReceive" + receiver + "," + sender + "-" + isFirstToken(receiver)
	snapshotChannelIsDone(sender, receiver) := true

	if isFirstToken(receiver) then {
		snapshotState(receiver) := state(receiver)
		snapshotInChannelState(sender, receiver) := []
		isFirstToken(receiver) := false

		//print "---->MarkerReceive" + snapshotState(receiver) + "," + state(receiver) + "-" + isFirstToken(receiver)

		forall i in nodesMap()(receiver) do seqblock
				channel(receiver, i) := channel(receiver, i) + ["token"]
				snapshotListenOnChannel(i, receiver) := true
				//print "---->MarkerReceive" + i + "," + receiver + "--" + channel(receiver, i) + "-" + snapshotListenOnChannel(i, receiver)
			endseqblock
		endforall
	} else {
		snapshotListenOnChannel(sender, receiver) := false
	}

	print "-->MarkerReceive " + myName
}


